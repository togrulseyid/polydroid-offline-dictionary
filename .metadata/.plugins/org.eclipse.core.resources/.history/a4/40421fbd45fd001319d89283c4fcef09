package com.togrul.polydroidofflinedictionary.settings;

import java.util.ArrayList;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.togrul.polydroidofflinedictionary.R;
import com.togrul.polydroidofflinedictionary.SpinnerAdapter;
import com.togrul.polydroidofflinedictionary.download.Download;
import com.togrul.polydroidofflinedictionary.download.XMLfunctions;

public class DownloadActivity extends Fragment{
	
	private ListView listView;
	private Intent intent;
	private Activity activity; 
	private boolean isDownload = false;
	private ArrayList<DatabaseModel> databaseModels ;
	private Document doc;
	private NodeList nodes;
	private ProgressBar progressBarDialogProgress;
	public static Fragment instance() {
		DownloadActivity downloadActivity = new DownloadActivity();		
		return downloadActivity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 
		View view = getActivity().getLayoutInflater().inflate(R.layout.listplaceholder, null);
		activity = getActivity();

	 	if (android.os.Build.VERSION.SDK_INT > 9) {
		    StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		    StrictMode.setThreadPolicy(policy);
		}
	 	
		listView = (ListView) view.findViewById(R.id.listViewDatabaseList);

		progressBarDialogProgress = (ProgressBar) view.findViewById(R.id.progressBarDialogProgress);
		
		listView.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				Toast.makeText(getActivity(), "XXXX", Toast.LENGTH_LONG).show();
				
				
				View view =getActivity().getLayoutInflater().inflate(R.layout.dialog_loading, null);
				
				new ListDownloadAsynTask(view).execute();
				return false;
			}
		});
		
	 	databaseModels = new ArrayList<DatabaseModel>();

		String xml = XMLfunctions.getXML();
		doc = XMLfunctions.XMLfromString(xml);

		int numResults = XMLfunctions.numResults(doc);

		if ((numResults <= 0)) {
			 Toast.makeText(activity, "No Internet Conection! Please try again later", Toast.LENGTH_LONG).show();
		}

		nodes = doc.getElementsByTagName("database");

		for (int i = 0; i < nodes.getLength(); i++) {
			DatabaseModel map = new DatabaseModel();

			Element e = (Element) nodes.item(i);

			if(new SpinnerAdapter(activity).isDownloaded(Integer.valueOf(XMLfunctions.getValue(e, "id")))==1){
				isDownload = true;
			}else{
				isDownload = false;
			}
			
			map.setId(XMLfunctions.getValue(e, "id"));
			map.setSize(XMLfunctions.getValue(e, "size"));
			map.setName(XMLfunctions.getValue(e, "name"));
			map.setDbname(XMLfunctions.getValue(e, "dbname"));
			map.setDownload(new SpinnerAdapter(activity).isDownloaded(Integer.valueOf(XMLfunctions.getValue(e, "id")))+ "");
			map.setIsdownload(isDownload);
			databaseModels.add(map);
		}
		
		SimpleAdapter adapter = new SimpleAdapter(activity, databaseModels);
		listView.setTextFilterEnabled(true);
		listView.setAdapter(adapter);
		listView.setOnItemClickListener(new PDOnClickListener());
		adapter.notifyDataSetChanged();
		
	 	
		return view;
	}	
	
	private class ListDownloadAsynTask extends AsyncTask<Void, Integer, Void>{
		AlertDialog.Builder builder;
		View view;
		
		public ListDownloadAsynTask(View view) {
			this.view = view;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			
			builder = new AlertDialog.Builder(getActivity());
			builder.setView(view);
			builder.setCancelable(false);
			builder.create();
			builder.show();
		}

		@Override
		protected Void doInBackground(Void... arg0) {
			for(int i=0; i<=100; i++) {
				try {
					Thread.sleep(100);
					publishProgress(i);
				} catch (Exception e) {
				}				
			}
			return null;
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			super.onProgressUpdate(values);
		}
		
		
		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);
			
//			builder.setView()
			
		}
	}
	
	
	
	
	private class PDOnClickListener implements OnItemClickListener {

		@Override
		public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
			
			TextView txt = (TextView) view.findViewById(R.id.is_item_downloaded_title);
			DatabaseModel o = (DatabaseModel) listView.getItemAtPosition(position);
			if (Integer.valueOf(o.getDownload()) == 1) {
				txt.setText("Downloaded");
				txt.setTextColor(Color.GREEN);
				intent = new Intent(activity, Download.class);
				intent.putExtra("id", o.getId());
				intent.putExtra("size", o.getSize());
				intent.putExtra("name", o.getName());
				intent.putExtra("dbname", o.getDbname());
				intent.putExtra("isDownload", o.getDownload());
				startActivity(intent);
			} else {
				txt.setText("Download");
				txt.setTextColor(Color.RED);
				intent = new Intent(activity, Download.class);
				intent.putExtra("id", o.getId());
				intent.putExtra("size", o.getSize());
				intent.putExtra("name", o.getName());
				intent.putExtra("dbname", o.getDbname());
				intent.putExtra("isDownload", o.getDownload());
				startActivity(intent);
			}
		}
	}
}