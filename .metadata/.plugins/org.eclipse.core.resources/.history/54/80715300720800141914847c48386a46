package com.togrul.pd;

import java.util.Observable;
import java.util.Observer;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.widget.SimpleCursorAdapter;
import android.support.v7.app.ActionBarActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Display;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.togrul.pd.views.WebViewTranslateOnTextView;
import com.togrul.polydroidofflinedictionary.R;

/**
 * @author Togrul Seyidov
 * @version 1.0.0
 * @see <a href="http://www.polydroid.info">PolyDroid.info</a>
 * @since <b>What the hell? ))</b>
 * */

public class PolyDroidActivity extends ActionBarActivity implements Observer,
		OnItemClickListener {

	private String database;
	private String spinnerText;
	private Dialog dialog;
	private ListView listView;
	private Spinner spinner;
	private EditText editText;
	private ImageButton SearchButton;
	private Button button1;
	private Button button2;
	private Button button3;
	private Button button4;
	private Button button5;
	private Button button6;
	private Button button7;
	private SpinnerAdapter spinnerAdapter;
	private SimpleCursorAdapter simpleCursorAdapter;
	private DataBaseHelper databaseHelper;
	private Typeface editTextTypeface;
	private Typeface typeface;
	private String sizeOfText = "font-size:18px;";
	private String RGB;
	private Intent i;
	private int screenHeight = 0;

	/*
	 * onCreate method it start first and main operations are here
	 */

	private Bundle savedInstanceState;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
this.savedInstanceState = savedInstanceState;
		setContentView(R.layout.activity_polydroid);

		spinner = (Spinner) findViewById(R.id.languages);
		SearchButton = (ImageButton) findViewById(R.id.searchbutton);
		editText = (EditText) findViewById(R.id.searchtext);
		listView = (ListView) findViewById(R.id.contentlist);

		button1 = (Button) findViewById(R.id.herif1);
		button2 = (Button) findViewById(R.id.herif2);
		button3 = (Button) findViewById(R.id.herif3);
		button4 = (Button) findViewById(R.id.herif4);
		button5 = (Button) findViewById(R.id.herif5);
		button6 = (Button) findViewById(R.id.herif6);
		button7 = (Button) findViewById(R.id.herif7);

		spinnerAdapter = new SpinnerAdapter(spinner, this);
		if (spinnerAdapter.selectCountSpinnerDB() == 0) {
			Intent i = new Intent(this,
					com.togrul.pd.settings.SettingsActivity.class);
			i.putExtra("FirstTab", 4);
			startActivity(i);
			finish();
		}

		spinnerAdapter.arrayAdapter();
		spinnerAdapter.close();
		spinner.setOnItemSelectedListener(new MyOnItemSelectedListener());
		// LoadPreference();
		spinner.setSaveEnabled(true);

		editTextTypeface = Typeface.createFromAsset(getAssets(),
				"fonts/ARIAL.TTF");
		editText.setTypeface(editTextTypeface);
		typeface = Typeface.createFromAsset(getAssets(), "fonts/ARIAL.TTF");
		button1.setTypeface(typeface);
		button2.setTypeface(typeface);
		button3.setTypeface(typeface);
		button4.setTypeface(typeface);
		button5.setTypeface(typeface);
		button6.setTypeface(typeface);
		button7.setTypeface(typeface);

		buttonAction(button1, getString(R.string.herif1));
		buttonAction(button2, getString(R.string.herif2));
		buttonAction(button3, getString(R.string.herif3));
		buttonAction(button4, getString(R.string.herif4));
		buttonAction(button5, getString(R.string.herif5));
		buttonAction(button6, getString(R.string.herif6));
		buttonAction(button7, getString(R.string.herif7));

		database = spinnerAdapter.dbnameFromTable(spinnerString(spinner));
		databaseHelper = new DataBaseHelper(getApplicationContext(), database);
		databaseHelper.observe();
		spinnerAdapter.close(); // // //
		databaseHelper.close(); // // //

		editText.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
			}

			@Override
			public void afterTextChanged(Editable s) {
				searchIt();
			}
		});

		editText.setOnTouchListener(new PDOnTouchListener());

		SearchButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				hideKeyboard(editText);
				try {
					searchIt();
				} catch (Exception e) {
				}
				databaseHelper.close();
				spinnerAdapter.close(); // // //
			}
		});
	}

	@Override
	protected void onPause() {
		super.onPause();
	}

	public class MyOnItemSelectedListener implements OnItemSelectedListener {
		public void onItemSelected(AdapterView<?> parent, View view, int pos,
				long id) {
			spinnerText = spinnerString(spinner);

			BeingWatched watch = new BeingWatched();
			watch.Send(database);
		}

		public void onNothingSelected(AdapterView<?> parent) {
			// Do nothing.
		}
	}

	private int LoadstyleSharedPreferences() {
		SharedPreferences sp = getSharedPreferences("styleSharedPreferences", 0);
		sizeOfText = "font-size:"
				+ (Integer.valueOf(sp.getString("SeekBar", "0")) + 12) + "px;";
		RGB = sp.getString("RGB", "color:rgb(172,173,131);");
		return Integer.valueOf(sp.getString("RadioButton", "0"));
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// Handle the back button
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			// Ask the user if they want to quit
			new AlertDialog.Builder(this)
					.setIcon(android.R.drawable.ic_dialog_alert)
					.setTitle(R.string.quit)
					.setMessage(R.string.really_quit)
					.setPositiveButton(R.string.yes,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
									System.exit(-1);
									finish();
								}
							}).setNegativeButton(R.string.no, null).show();
			return true;
		} else if (keyCode == KeyEvent.KEYCODE_ENTER) {
			hideKeyboard(editText);
			try {
				searchIt();
			} catch (Exception e) {
				// Log.d("KEY",KeyEvent.KEYCODE_ENTER+"");
			}

			return true;
		} else {
			return super.onKeyDown(keyCode, event);
		}

	}

	public void searchIt() {
		database = spinnerAdapter.dbnameFromTable((String) spinner
				.getSelectedItem());
		databaseHelper = new DataBaseHelper(getApplicationContext(), database);
		searchAlgorithm(spinnerString(spinner));
		databaseHelper.close();
		spinnerAdapter.close();
	}

	/*
	 * This method returns Spinners selection
	 */
	public String spinnerString(Spinner spinner) {
		return spinner.getSelectedItem().toString();
	}

	/*
	 * This method returns EditText value
	 */
	public String editTextString(EditText editText) {
		return editText.getText().toString();
	}

	/*
	 * This is the Core Search Algorithm
	 */
	public void searchAlgorithm(String Text) {
		// Checks that word is clean
		if (!checkText(editText)) {
			Toast.makeText(getApplicationContext(),
					getResources().getString(R.string.nothing_found_in_db),
					Toast.LENGTH_LONG).show();
		} else {
			try {
				Cursor cursor = databaseHelper
						.queryLike(editTextString(editText));
				String[] mFromColumns = new String[] { DataBaseHelper.TABLE_FROM };
				int[] mToFields = new int[] { R.id.text };

				simpleCursorAdapter = new SimpleCursorAdapter(this,
						R.layout.row, cursor, mFromColumns, mToFields, 0);

				listView.setAdapter(simpleCursorAdapter);
				listView.setOnItemClickListener(this);

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					spinnerAdapter.close();
					databaseHelper.close();
				} catch (Exception e) {
				}
			}

		}
	}

	@Override
	public void update(Observable observable, Object data) {
		// Log.d("DataOfObserver", data+"");
	}

	public void buttonAction(Button button, final String letter) {
		button.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				editText.append(letter);
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.menu_polydroid, menu);
		return true;
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_item_exit:
			finish();
			return false;

		case R.id.menu_item_info:
			i = new Intent(getApplicationContext(),
					com.togrul.pd.settings.SettingsActivity.class);
			i.putExtra("FirstTab", 2);
			startActivity(i);
			return true;

		case R.id.menu_item_settings:
			i = new Intent(getApplicationContext(),
					com.togrul.pd.settings.SettingsActivity.class);
			startActivity(i);
			return true;

		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/*
	 * version 1.0 Pop Up WebView that shows translated word. This is first
	 * method
	 */
	public void WebViewTranslateOnToast(View view, long id) {

		dialog = new Dialog(PolyDroidActivity.this);

		Point size = new Point();
		WindowManager w = getWindowManager();

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
			w.getDefaultDisplay().getSize(size);
			screenHeight = size.y;
		} else {
			Display d = w.getDefaultDisplay();
			screenHeight = d.getHeight();
		}

		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		dialog.getWindow().setBackgroundDrawable(
				new ColorDrawable(Color.TRANSPARENT));
		dialog.setContentView(R.layout.word);

		dialog.getWindow().setLayout(LayoutParams.MATCH_PARENT,
				screenHeight * 60 / 100);
		dialog.setCancelable(true);

		WebView webView = (WebView) dialog.findViewById(R.id.WebView);
		try {
			Cursor c = databaseHelper.query(((TextView) view).getText()
					.toString(), spinnerText, id);
			c.moveToFirst();
			String s = c.getString(c.getColumnIndex("_to"));
			// Translated word

			s = "<!DOCTYPE HTML><html><head>"
					+ "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">"
					+ "<title>Translate</title>"
					+ " <style type=\"text/css\">"
					// +
					// " @font-face {  font-family: 'myface';  src: url('file:///android_asset/fonts//ARIAL.TTF');	} "
					+ " body{"
					+ RGB
					+ " background-color: #F5F5DC; "
					+ sizeOfText
					+ " font-family: 'myface', arial;" // ola bilsin islemir
					+ " margin:30px 30px 0 30px;" + " }</style>" + "</head>"
					+ " <body><center><font color='black'>"
					+ c.getString(c.getColumnIndex("_from"))
					+ "<hr size='2' color='black'></font></center>" + s
					+ "</body>" + "</html>";
			webView.loadData(s, "text/html; charset=utf-8", "utf-8");
		} catch (Exception e) {
		} finally {
			try {
				databaseHelper.close();
			} catch (Exception e) {
			}
		}

		ImageButton exit = (ImageButton) dialog.findViewById(R.id.exit);
		exit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				dialog.cancel();
			}
		});

		dialog.show();
	}

	/*
	 * version 1.0
	 */

	public void WebViewTranslateOnTextView(CharSequence charSequence, long id) {
		
		Intent intent = new Intent(getApplicationContext(),
				WebViewTranslateOnTextView.class);

//		bundle = savedInstanceState;
	    Bundle bundle = new Bundle();

	    bundle.putString("charSequence", charSequence.toString());
	    bundle.putSerializable("id", id);
	    bundle.putSerializable("databaseHelper",  databaseHelper);
	    bundle.putSerializable("spinnerText", spinnerText);
		
		
	    
//		intent.putExtra("charSequence", charSequence);
//		intent.putExtra("id", id);
//		intent.putExtra("databaseHelper",  databaseHelper);
//		intent.putExtra("spinnerText", spinnerText);
		// txt.setData(view, id, databaseHelper, spinnerText);
		startActivity(intent);
	}

	/*
	 * Checker checks EditText value that it will not be a word that there is no
	 * such table Like 'Ğ', 'ğ', 'ı', ' ' , '\t' and etc.
	 */
	public boolean checkText(EditText text) {
		boolean safe = false;

		if (text.equals("Ğ") || text.equals("ğ") || text.equals("ı")
				|| text.equals(" "))
			safe = false;
		else
			safe = true;

		return safe;
	}

	private void hideKeyboard(EditText editText) {
		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editText.getWindowToken(), 0);
	}

	@Override
	public void onItemClick(AdapterView<?> adapterView, View view,
			int position, long id) {
		
		database = spinnerAdapter.dbnameFromTable((String) spinner
				.getSelectedItem());
		spinnerAdapter.close();
		databaseHelper = new DataBaseHelper(getApplicationContext(), database);

		switch (LoadstyleSharedPreferences()) {

		case 0:
			WebViewTranslateOnTextView(((TextView) view).getText(), id);
			break;

		case 1:
			WebViewTranslateOnToast(view, id);
			break;

		default:
			WebViewTranslateOnTextView(((TextView) view).getText(), id);
			break;
		}
	}

	private class PDOnTouchListener implements
			android.view.View.OnTouchListener {

		@Override
		public boolean onTouch(View v, MotionEvent event) {

			final int DRAWABLE_RIGHT = 2;
			if (event.getAction() == MotionEvent.ACTION_UP) {
				if (event.getX() >= (editText.getRight() - editText
						.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds()
						.width())) {
					// your action here
					editText.setText("");
					listView.setAdapter(null);
				}
			}

			return false;
		}

	}
}

/**
 * This is the class being observed.
 * 
 * @version 1.0.0
 */
class BeingWatched extends Observable {
	public static String s;

	String Send(String s) {
		return BeingWatched.s = s;
	}

	void Send() {
		setChanged();
		notifyObservers(new String[] { BeingWatched.s });
	}
}
