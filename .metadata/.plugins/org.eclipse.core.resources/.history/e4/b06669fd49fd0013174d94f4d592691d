package com.togrul.polydroidofflinedictionary.settings;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.StrictMode;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.togrul.polydroidofflinedictionary.R;
import com.togrul.polydroidofflinedictionary.SpinnerAdapter;
import com.togrul.polydroidofflinedictionary.download.LoadingDialog;
import com.togrul.polydroidofflinedictionary.download.XMLfunctions;

public class DownloadActivity extends Fragment{
	
	private static File sdcard = Environment.getExternalStorageDirectory();
	private static String dbPath = sdcard.getAbsolutePath() + File.separator+"PolyDroid" + File.separator;
	private static final String dbfile = sdcard.getAbsolutePath()+ File.separator + "PolyDroid" + File.separator + "database.db";
	public static long total = 0, lenghtOfFile;
	public static final int DIALOG_DOWNLOAD_PROGRESS = 0;
//	private String name;
	String id;
	
	
	
	private ListView listView;
	private Intent intent;
	private Activity activity; 
	private boolean isDownload = false;
	private ArrayList<DatabaseModel> databaseModels ;
	private Document doc;
	private NodeList nodes;
	
	public static Fragment instance() {
		DownloadActivity downloadActivity = new DownloadActivity();		
		return downloadActivity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 
		View view = getActivity().getLayoutInflater().inflate(R.layout.listplaceholder, null);
		activity = getActivity();

	 	if (android.os.Build.VERSION.SDK_INT > 9) {
		    StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		    StrictMode.setThreadPolicy(policy);
		}
	 	
		listView = (ListView) view.findViewById(R.id.listViewDatabaseList);
		
		listView.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
				
				new DownloadFileAsync(getActivity()).execute();
				
				return false;
			}
		});
		
	 	databaseModels = new ArrayList<DatabaseModel>();

		String xml = XMLfunctions.getXML();
		doc = XMLfunctions.XMLfromString(xml);

		int numResults = XMLfunctions.numResults(doc);

		if ((numResults <= 0)) {
			 Toast.makeText(activity, "No Internet Conection! Please try again later", Toast.LENGTH_LONG).show();
		}

		nodes = doc.getElementsByTagName("database");

		for (int i = 0; i < nodes.getLength(); i++) {
			DatabaseModel map = new DatabaseModel();

			Element e = (Element) nodes.item(i);

			if(new SpinnerAdapter(activity).isDownloaded(Integer.valueOf(XMLfunctions.getValue(e, "id")))==1){
				isDownload = true;
			}else{
				isDownload = false;
			}
			
			map.setId(XMLfunctions.getValue(e, "id"));
			map.setSize(XMLfunctions.getValue(e, "size"));
			map.setName(XMLfunctions.getValue(e, "name"));
			map.setDbname(XMLfunctions.getValue(e, "dbname"));
			map.setDownload(new SpinnerAdapter(activity).isDownloaded(Integer.valueOf(XMLfunctions.getValue(e, "id")))+ "");
			map.setIsdownload(isDownload);
			databaseModels.add(map);
		}
		
		SimpleAdapter adapter = new SimpleAdapter(activity, databaseModels);
		listView.setTextFilterEnabled(true);
		listView.setAdapter(adapter);
		listView.setOnItemClickListener(new PDOnClickListener());
		adapter.notifyDataSetChanged();
		
	 	
		return view;
	}	
	
	DatabaseModel o ;
	
	private class PDOnClickListener implements OnItemClickListener {

		@Override
		public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
			
			TextView txt = (TextView) view.findViewById(R.id.is_item_downloaded_title);
			o = (DatabaseModel) listView.getItemAtPosition(position);
			if (Integer.valueOf(o.getDownload()) == 1) {
				txt.setText("Downloaded");
				txt.setTextColor(Color.GREEN);
			} else {
				txt.setText("Download");
				txt.setTextColor(Color.RED);
			}
			
			this.id = o.getId();
			intent.putExtra("id", o.getId());
			intent.putExtra("size", o.getSize());
			intent.putExtra("name", o.getName());
			intent.putExtra("dbname", o.getDbname());
			intent.putExtra("isDownload", o.getDownload());
			startActivity(intent);
			
			

			lenghtOfFile = Integer.valueOf(o.getSize());
			
			
			if( new SpinnerAdapter(activity).isDownloaded(Integer.valueOf(o.getId())) != 0) {
//				startBtn.setText("Delete");
//				TODO: start Delete

				File file = new File(dbPath+o.getDbname());
				boolean x = file.delete();
				if(x){
					deleteSpinnerItem(o.getId());
				}					
			
				
			}else{
//				TODO: start download 
				startDownload("http://polydroid.info/polydroid/encrypted/"+ o.getDbname());
			}
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	private class DownloadFileAsync extends AsyncTask<String, Integer, Void>{

		LoadingDialog dialog;	
		private Activity activity;
		
		public DownloadFileAsync(Activity activity) {
			this.activity = activity;
		}
		
		@Override
		protected void onPreExecute() {
			super.onPreExecute();

			if (dialog == null) {
				dialog = new LoadingDialog();
				dialog.show(getFragmentManager(), "");
			}

		}

		@Override
		protected Void doInBackground(String... urls) {
			
			int count;
			try {
				URL url = new URL(urls[0]);
				URLConnection conexion = url.openConnection();
				conexion.connect();
				
				InputStream input = new BufferedInputStream(url.openStream());
				OutputStream output = new FileOutputStream(dbPath + database);

				byte data[] = new byte[1024];

				while ((count = input.read(data)) != -1) {
					total += count;
					output.write(data, 0, count);
					if (total != lenghtOfFile) {
						publishProgress((int) ((total * 100) / lenghtOfFile));
					}
				}

				output.flush();
				output.close();
				input.close();
			} catch (Exception e) {
			} finally {
				total = 0;
				SpinnerAdapter adapter = new SpinnerAdapter(activity);
				adapter.addSpinnerItem(id, database, o.getName());
			}
			
			return null;
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			super.onProgressUpdate(values);
			dialog.setProgress(values[0]);
		}
		
		
		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);
			
			if (dialog != null) {
				dialog.dismiss();
			}
		}
	}
	
	
	
	
	public void deleteSpinnerItem(String id) {
		SQLiteDatabase spinnerDB = android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(dbfile, null);
		spinnerDB.delete("database", " id="+id, null);
		spinnerDB.close();
	}
	

	private void startDownload(String url) {
		new DownloadFileAsync(getActivity()).execute(url);
	}

}